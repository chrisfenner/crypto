// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
package kbkdf

import (
	"bytes"
	"crypto/sha1"
	"crypto/sha256"
	"crypto/sha512"
	"hash"
	"testing"
)

type kbkdfTest struct {
	h       func() hash.Hash
	keyLen  int
	secret  []byte
	label   []byte
	context []byte
	out     []byte
}

var hmacCounterTests = []kbkdfTest{
	// Test cases generated with 'openssl kdf'
	// Ex: openssl kdf -keylen $LEN -kdfopt key:$SECRET -kdfopt mac:hmac
	//   -kdfopt digest:$DIGEST -kdfopt salt:$LABEL -kdfopt info:$CONTEXT
	//   KBKDF
	{
		h:       sha1.New,
		keyLen:  0,
		secret:  []byte("tetanic"),
		label:   []byte("pyrites"),
		context: []byte("sawbwa"),
		out:     nil,
	},
	{
		h:       sha1.New,
		keyLen:  1,
		secret:  []byte("overlive"),
		label:   []byte("tuberization"),
		context: []byte("janitress"),
		out:     []byte{0xc8},
	},
	{
		h:       sha1.New,
		keyLen:  15,
		secret:  []byte("pinnatopectinate"),
		label:   []byte("hostility"),
		context: []byte("Parma"),
		out:     []byte{0x97, 0x6d, 0xda, 0x51, 0xb5, 0x2d, 0x42, 0xeb, 0xb6, 0x82, 0x7d, 0x71, 0xd4, 0xd3, 0x70},
	},
	{
		h:       sha1.New,
		keyLen:  16,
		secret:  []byte("extricate"),
		label:   []byte("degerminator"),
		context: nil,
		out:     []byte{0xdc, 0xee, 0xc8, 0xac, 0x19, 0x84, 0x1a, 0xe7, 0xab, 0x44, 0x81, 0x69, 0xee, 0x36, 0x0c, 0xe9},
	},
	{
		h:       sha1.New,
		keyLen:  17,
		secret:  []byte("cystolithiasis"),
		label:   []byte("saintlily"),
		context: []byte("premiss"),
		out:     []byte{0xd4, 0xf4, 0x65, 0xc2, 0x59, 0x36, 0xf9, 0x56, 0x34, 0xa3, 0xfa, 0xc2, 0x69, 0x65, 0x98, 0xf7, 0x15},
	},
	{
		h:       sha1.New,
		keyLen:  23,
		secret:  []byte("chummage"),
		label:   []byte("causeway"),
		context: []byte("jog"),
		out:     []byte{0x7f, 0xcc, 0xd4, 0xc8, 0x00, 0x4e, 0x51, 0x4c, 0xda, 0x52, 0xe5, 0x03, 0xbc, 0x4b, 0xa0, 0x29, 0xd0, 0x0f, 0x81, 0x0f, 0xf1, 0xd1, 0x9d},
	},
	{
		h:       sha1.New,
		keyLen:  24,
		secret:  []byte("Teaguelander"),
		label:   []byte("hepatoenteric"),
		context: []byte("proadvertising"),
		out:     []byte{0x84, 0x97, 0xaa, 0x2c, 0xc9, 0x62, 0x58, 0x3c, 0xbd, 0x23, 0x5e, 0x7b, 0xbc, 0xea, 0x21, 0xaa, 0x97, 0x8e, 0xdc, 0xe6, 0xb9, 0x0c, 0x1c, 0xe5},
	},
	{
		h:       sha1.New,
		keyLen:  25,
		secret:  []byte("ungenerable"),
		label:   []byte("Wordsworthian"),
		context: []byte("stylopod"),
		out:     []byte{0x6c, 0x74, 0x14, 0x5d, 0xef, 0xa2, 0xd5, 0x03, 0x1d, 0x59, 0x84, 0xd4, 0xda, 0x97, 0x99, 0x66, 0x27, 0x01, 0xb7, 0x44, 0xd5, 0xc7, 0x1d, 0x4d, 0xd7},
	},
	{
		h:       sha1.New,
		keyLen:  31,
		secret:  []byte("palame"),
		label:   []byte("dandification"),
		context: []byte("Bittium"),
		out:     []byte{0x8c, 0x53, 0x6a, 0x6e, 0xc7, 0x84, 0x9e, 0x09, 0x50, 0x76, 0xec, 0x1a, 0xe5, 0x6c, 0xf1, 0x01, 0x87, 0xb9, 0x80, 0xeb, 0x5a, 0xbb, 0xcc, 0xae, 0x43, 0xea, 0x65, 0xc6, 0xa1, 0x2c, 0xf6},
	},
	{
		h:       sha1.New,
		keyLen:  32,
		secret:  []byte("druggery"),
		label:   []byte("sericeous"),
		context: []byte("silverbelly"),
		out:     []byte{0x86, 0x0c, 0x88, 0xda, 0xf4, 0x8e, 0x03, 0x13, 0x60, 0xe0, 0xd3, 0xa0, 0x54, 0x65, 0x68, 0x67, 0x9a, 0xbb, 0x72, 0xae, 0xd3, 0xcb, 0x0e, 0xb1, 0xff, 0x6c, 0xd4, 0x9c, 0x00, 0x82, 0xb5, 0xcc},
	},
	{
		h:       sha1.New,
		keyLen:  33,
		secret:  []byte("unvisor"),
		label:   []byte("risen"),
		context: []byte("eternalism"),
		out:     []byte{0xd6, 0xa9, 0x7a, 0xea, 0xeb, 0x51, 0x2b, 0x08, 0x48, 0x55, 0x24, 0x11, 0xf6, 0x42, 0x12, 0x02, 0xd1, 0x83, 0xdc, 0xcc, 0xe2, 0x19, 0x68, 0x61, 0x2d, 0x54, 0x25, 0x7e, 0x83, 0xc0, 0x4e, 0x49, 0xc8},
	},
	{
		h:       sha1.New,
		keyLen:  47,
		secret:  []byte("stallion"),
		label:   []byte("peer"),
		context: []byte("ingemination"),
		out:     []byte{0x07, 0x20, 0x1c, 0x61, 0x7f, 0x61, 0xf8, 0x12, 0xaa, 0xcc, 0xbf, 0x12, 0xed, 0xe4, 0x32, 0x1c, 0xcb, 0x51, 0xb8, 0xd4, 0x97, 0x34, 0xd6, 0xe1, 0xfb, 0x08, 0xeb, 0xd4, 0x0f, 0x50, 0x2c, 0x82, 0x84, 0xd8, 0x04, 0x8c, 0x90, 0x97, 0x59, 0x29, 0x34, 0x87, 0x05, 0xae, 0x33, 0xb8, 0xcb},
	},
	{
		h:       sha1.New,
		keyLen:  48,
		secret:  []byte("scabrities"),
		label:   []byte("improlificical"),
		context: []byte("codex"),
		out:     []byte{0x5e, 0x19, 0xc2, 0x3a, 0x29, 0x9a, 0x46, 0x22, 0xae, 0xb0, 0x13, 0xb3, 0xba, 0xee, 0xc5, 0xbd, 0xa7, 0x81, 0x6d, 0xc3, 0x95, 0x19, 0xbe, 0xec, 0x96, 0xea, 0x1a, 0xc6, 0xae, 0x91, 0x4b, 0x77, 0x9b, 0x10, 0x40, 0xc0, 0x4b, 0x4e, 0x72, 0x48, 0xae, 0x62, 0x9c, 0xca, 0x23, 0x0b, 0x6c, 0xa5},
	},
	{
		h:       sha1.New,
		keyLen:  49,
		secret:  []byte("perspectograph"),
		label:   []byte("Eutaenia"),
		context: []byte("unworldly"),
		out:     []byte{0x1a, 0x6f, 0xe8, 0x5e, 0x2f, 0xa8, 0xc2, 0xfe, 0xbe, 0xe4, 0xfc, 0x26, 0x98, 0xae, 0x91, 0x80, 0x06, 0x6e, 0xf3, 0x9e, 0x8b, 0x47, 0x2b, 0xa4, 0xd2, 0x48, 0xaa, 0x9d, 0x62, 0x84, 0x50, 0xfe, 0xfb, 0x72, 0x7b, 0x90, 0x6a, 0x77, 0x35, 0x9f, 0xe8, 0xf9, 0xd4, 0xaa, 0xe6, 0xaf, 0x8b, 0x37, 0x25},
	},
	{
		h:       sha1.New,
		keyLen:  63,
		secret:  []byte("atoll"),
		label:   []byte("affliction"),
		context: []byte("wiredancer"),
		out:     []byte{0x14, 0x3a, 0x08, 0xb0, 0xfd, 0x2d, 0xae, 0x8e, 0x35, 0x67, 0x92, 0xb7, 0x07, 0xac, 0x5c, 0x8e, 0x4d, 0xf3, 0xef, 0x24, 0xc1, 0x81, 0x21, 0x58, 0xf4, 0x66, 0xfd, 0xc2, 0x34, 0x20, 0x0c, 0xda, 0x71, 0x48, 0xda, 0xb5, 0xe1, 0x53, 0x01, 0xcc, 0x4b, 0xf3, 0x52, 0x88, 0xa5, 0x45, 0x14, 0xd2, 0xb7, 0xa0, 0x7a, 0x88, 0x8b, 0x39, 0x91, 0xc4, 0xa0, 0x87, 0xcc, 0x41, 0xa1, 0x7b, 0x33},
	},
	{
		h:       sha1.New,
		keyLen:  64,
		secret:  []byte("loiteringly"),
		label:   []byte("festivous"),
		context: []byte("incompact"),
		out:     []byte{0x6e, 0xe4, 0xe3, 0xc1, 0xf1, 0x44, 0xd4, 0x90, 0xdf, 0xc5, 0x7b, 0x40, 0xa6, 0xc9, 0xfe, 0xd0, 0x14, 0x4a, 0x48, 0xc1, 0x83, 0x3e, 0xb6, 0xde, 0xb9, 0x5e, 0x1d, 0x2a, 0xa3, 0xab, 0x05, 0xfa, 0xf8, 0xcf, 0xc9, 0x66, 0x73, 0xbf, 0x45, 0x94, 0x24, 0x33, 0xa4, 0xdf, 0x17, 0x0a, 0x07, 0xce, 0x6c, 0xad, 0x8e, 0x29, 0x45, 0xc2, 0x7f, 0xcc, 0xd1, 0x29, 0x10, 0x4b, 0xb2, 0xb7, 0x73, 0xed},
	},
	{
		h:       sha1.New,
		keyLen:  65,
		secret:  []byte("unshirted"),
		label:   []byte("primp"),
		context: []byte("waumle"),
		out:     []byte{0xbe, 0x2c, 0x3e, 0x43, 0x88, 0x25, 0x02, 0x5d, 0xae, 0x55, 0xa7, 0x54, 0x76, 0xfb, 0x28, 0xd3, 0xa6, 0x23, 0x15, 0xb5, 0xdd, 0xd2, 0xdb, 0x62, 0x53, 0x82, 0xc0, 0xe7, 0xfe, 0x6b, 0x47, 0xed, 0xa8, 0x42, 0xbb, 0x18, 0xe2, 0x0a, 0xe1, 0xa8, 0x04, 0x22, 0x00, 0x7b, 0xaa, 0x33, 0x33, 0x26, 0xb1, 0x19, 0xf5, 0x12, 0x73, 0x23, 0x86, 0xa0, 0x36, 0x4b, 0xdb, 0xbc, 0xec, 0xe0, 0xaf, 0xed, 0xc0},
	},
	{
		h:       sha256.New,
		keyLen:  1,
		secret:  []byte("phantasmically"),
		label:   []byte("khoja"),
		context: []byte("bottlelike"),
		out:     []byte{0x3b},
	},
	{
		h:       sha256.New,
		keyLen:  15,
		secret:  []byte("uzaron"),
		label:   []byte("piloting"),
		context: []byte("bellmaker"),
		out:     []byte{0xad, 0x00, 0x7c, 0xd7, 0xff, 0x47, 0xab, 0x4f, 0x0a, 0x31, 0x31, 0xd1, 0xbf, 0x59, 0xe5},
	},
	{
		h:       sha256.New,
		keyLen:  16,
		secret:  []byte("Persicize"),
		label:   []byte("unflagged"),
		context: []byte("tuneless"),
		out:     []byte{0xa2, 0x7a, 0x60, 0x92, 0xaf, 0x7d, 0x29, 0x15, 0x64, 0xd1, 0x22, 0x74, 0x00, 0x37, 0xb4, 0xc7},
	},
	{
		h:       sha256.New,
		keyLen:  17,
		secret:  []byte("upstage"),
		label:   []byte("mothworm"),
		context: []byte("skewer"),
		out:     []byte{0xdf, 0xb7, 0xdd, 0x55, 0x43, 0x29, 0x43, 0xc5, 0x3e, 0xef, 0xe7, 0x19, 0xf9, 0xca, 0x3e, 0x3b, 0x51},
	},
	{
		h:       sha256.New,
		keyLen:  23,
		secret:  []byte("subpial"),
		label:   []byte("venturesome"),
		context: []byte("coplanar"),
		out:     []byte{0x5d, 0x2d, 0xce, 0xb4, 0x80, 0xaa, 0xec, 0x17, 0xa7, 0xc4, 0x81, 0x88, 0xca, 0x06, 0x8a, 0x65, 0xcc, 0xa8, 0x91, 0xdf, 0x30, 0x46, 0xa1},
	},
	{
		h:       sha256.New,
		keyLen:  24,
		secret:  []byte("unvariable"),
		label:   nil,
		context: nil,
		out:     []byte{0xe3, 0x9d, 0xfa, 0xb6, 0x28, 0xad, 0x46, 0xe3, 0x0e, 0x7c, 0xf6, 0x7b, 0xf3, 0xb5, 0xe7, 0xea, 0x0d, 0xf6, 0x8d, 0x58, 0xcf, 0xf2, 0x9c, 0x09},
	},
	{
		h:       sha256.New,
		keyLen:  25,
		secret:  []byte("predisregard"),
		label:   []byte("presubmission"),
		context: []byte("enchainment"),
		out:     []byte{0x8f, 0xbc, 0x6b, 0x33, 0xb6, 0xe9, 0x4e, 0xe6, 0xf3, 0x56, 0x43, 0x19, 0xa7, 0xc9, 0xf1, 0x1e, 0xb1, 0x3c, 0x45, 0xf8, 0x59, 0xac, 0x3b, 0xca, 0x57},
	},
	{
		h:       sha256.New,
		keyLen:  31,
		secret:  []byte("Chernomorish"),
		label:   []byte("Dictyonema"),
		context: []byte("indurite"),
		out:     []byte{0xb4, 0x28, 0x16, 0x35, 0x07, 0x78, 0x97, 0x4f, 0x55, 0x73, 0x10, 0xca, 0xaa, 0x44, 0xf6, 0x1b, 0x21, 0xe7, 0x05, 0xbb, 0xf2, 0x88, 0x5c, 0xf3, 0x43, 0xdb, 0x99, 0x95, 0xd9, 0x61, 0x97},
	},
	{
		h:       sha256.New,
		keyLen:  32,
		secret:  []byte("phot"),
		label:   []byte("undercause"),
		context: []byte("clonicotonic"),
		out:     []byte{0xe7, 0x14, 0x58, 0x5d, 0xa5, 0xff, 0xdb, 0xe2, 0x0f, 0x5b, 0x7f, 0x23, 0xbd, 0x00, 0x7d, 0x5d, 0xb5, 0x38, 0xa0, 0xec, 0x16, 0xb0, 0xd4, 0xa8, 0xd7, 0x74, 0x1f, 0xfa, 0xc5, 0x84, 0x1b, 0x9a},
	},
	{
		h:       sha256.New,
		keyLen:  33,
		secret:  []byte("fatwood"),
		label:   []byte("slidage"),
		context: []byte("turboexciter"),
		out:     []byte{0x21, 0xee, 0x97, 0x8f, 0x35, 0x56, 0xf2, 0x9b, 0xb8, 0x81, 0xbc, 0xab, 0x85, 0xae, 0x88, 0x18, 0x45, 0x71, 0xcb, 0xcc, 0xea, 0xe1, 0xea, 0x0b, 0xd9, 0x59, 0x79, 0xdb, 0x72, 0x23, 0xe9, 0x62, 0xdd},
	},
	{
		h:       sha256.New,
		keyLen:  47,
		secret:  []byte("proexercise"),
		label:   []byte("psychotheism"),
		context: []byte("underworld"),
		out:     []byte{0x91, 0x74, 0xdb, 0x65, 0xb3, 0xa9, 0xdb, 0x71, 0x4c, 0xee, 0x3f, 0x49, 0x4b, 0x83, 0xfe, 0x5f, 0x96, 0x8e, 0x23, 0xb7, 0xda, 0x85, 0x5c, 0x99, 0xdf, 0xc1, 0x17, 0x1e, 0x53, 0x2d, 0x04, 0xaa, 0x19, 0xe4, 0xf3, 0x51, 0x42, 0xce, 0x21, 0x23, 0x17, 0x85, 0x37, 0xed, 0x6f, 0xd7, 0x0e},
	},
	{
		h:       sha256.New,
		keyLen:  48,
		secret:  []byte("supraquantivalent"),
		label:   []byte("ness"),
		context: []byte("macropterous"),
		out:     []byte{0xec, 0x17, 0xad, 0xb2, 0xa9, 0x12, 0xcf, 0xc7, 0x5c, 0x8e, 0xb7, 0x1f, 0x44, 0xfb, 0xf1, 0x51, 0xef, 0x08, 0x3a, 0x25, 0x58, 0xae, 0x4b, 0xaa, 0xef, 0x18, 0xc5, 0xe9, 0xb1, 0xad, 0x48, 0x3a, 0x6d, 0xbe, 0x9e, 0x2a, 0xab, 0xd2, 0x2b, 0x02, 0x98, 0x1c, 0x5f, 0xb1, 0xbe, 0x6c, 0x11, 0xf8},
	},
	{
		h:       sha256.New,
		keyLen:  49,
		secret:  []byte("misventure"),
		label:   []byte("leatherworking"),
		context: []byte("ferreter"),
		out:     []byte{0x69, 0xeb, 0x8f, 0x88, 0xdd, 0x58, 0x96, 0xdf, 0x19, 0x74, 0x58, 0xc1, 0xa0, 0x68, 0x89, 0x32, 0x2b, 0xcc, 0x11, 0x8d, 0x9b, 0x4e, 0x70, 0xbc, 0x83, 0x1e, 0x5b, 0x0c, 0xd9, 0xfc, 0x79, 0x33, 0xda, 0xfd, 0x20, 0xd1, 0xe1, 0xfe, 0xbe, 0x7c, 0x21, 0xec, 0x30, 0xcd, 0x56, 0x88, 0x66, 0xd4, 0x25},
	},
	{
		h:       sha256.New,
		keyLen:  63,
		secret:  []byte("bromelin"),
		label:   []byte("psychopannychist"),
		context: []byte("ladylikeness"),
		out:     []byte{0xf1, 0xf5, 0x4b, 0x8e, 0xa9, 0xbe, 0x10, 0xfe, 0x29, 0xb0, 0x68, 0xb1, 0x8a, 0xd3, 0x89, 0xb0, 0x44, 0xa9, 0xdc, 0x06, 0x47, 0x55, 0x53, 0x02, 0x32, 0xca, 0x6e, 0x8f, 0x25, 0xb8, 0x18, 0x3b, 0x6e, 0x3e, 0xd9, 0xcf, 0x8a, 0xfb, 0x7b, 0x8b, 0x57, 0x9e, 0x84, 0x0f, 0xf4, 0xb8, 0x25, 0xe6, 0x12, 0xda, 0xe5, 0x6d, 0x11, 0x8c, 0x72, 0x54, 0x6a, 0xb9, 0xf5, 0x33, 0xe5, 0xfb, 0x6c},
	},
	{
		h:       sha256.New,
		keyLen:  64,
		secret:  []byte("gobioid"),
		label:   []byte("polyspermous"),
		context: []byte("Synchytriaceae"),
		out:     []byte{0xd5, 0x32, 0xc7, 0x6c, 0x23, 0x9d, 0x47, 0x2c, 0xca, 0xcf, 0x5a, 0xed, 0x20, 0xf8, 0x51, 0x00, 0xdd, 0x67, 0x23, 0xe4, 0x0b, 0x6e, 0xda, 0x83, 0x2a, 0x35, 0xd9, 0xab, 0x48, 0x12, 0x47, 0x21, 0xa4, 0x83, 0xfb, 0x60, 0x54, 0x66, 0x38, 0x74, 0x5c, 0x80, 0xaf, 0xd0, 0x4e, 0x3b, 0xbb, 0x6e, 0xad, 0x2b, 0x4a, 0xb8, 0xbb, 0xdd, 0xeb, 0x19, 0xc7, 0x1c, 0x70, 0xcc, 0x91, 0x72, 0xb8, 0xc9},
	},
	{
		h:       sha256.New,
		keyLen:  65,
		secret:  []byte("flaxwort"),
		label:   []byte("Babhan"),
		context: []byte("sulphopupuric"),
		out:     []byte{0xb1, 0x78, 0x39, 0xcd, 0x0f, 0xe5, 0x1f, 0x88, 0x13, 0xe0, 0x8a, 0x2b, 0xfc, 0x75, 0xfc, 0xc4, 0x4f, 0x11, 0x0e, 0x4e, 0x48, 0x02, 0x46, 0xdf, 0x75, 0x03, 0xec, 0x52, 0x71, 0x5a, 0x24, 0x99, 0x16, 0x0d, 0xfa, 0xbb, 0x1f, 0x64, 0xb4, 0x4c, 0xce, 0xd4, 0x1a, 0x8c, 0x8d, 0x09, 0xd2, 0x18, 0x0f, 0xac, 0x50, 0x0f, 0xb6, 0xf2, 0xe6, 0x8b, 0xf9, 0xf4, 0xb5, 0x52, 0x2f, 0x58, 0xbe, 0x40, 0x75},
	},
	{
		h:       sha512.New384,
		keyLen:  1,
		secret:  []byte("heliconist"),
		label:   []byte("autophonoscope"),
		context: []byte("xylene"),
		out:     []byte{0xe6},
	},
	{
		h:       sha512.New384,
		keyLen:  15,
		secret:  []byte("flutebird"),
		label:   []byte("reductionistic"),
		context: []byte("superinfection"),
		out:     []byte{0x11, 0x9d, 0xeb, 0x35, 0xc2, 0xde, 0x4f, 0x83, 0xe8, 0xb2, 0x4c, 0xb0, 0x4d, 0x35, 0x40},
	},
	{
		h:       sha512.New384,
		keyLen:  16,
		secret:  []byte("intrencher"),
		label:   nil,
		context: []byte("unimprovableness"),
		out:     []byte{0x70, 0x9b, 0xf0, 0xe7, 0xcb, 0x45, 0xa7, 0x77, 0x80, 0x31, 0xcf, 0x99, 0x7f, 0x6a, 0x7b, 0x0b},
	},
	{
		h:       sha512.New384,
		keyLen:  17,
		secret:  []byte("stoach"),
		label:   []byte("rainspout"),
		context: []byte("seaquake"),
		out:     []byte{0x50, 0x48, 0x2e, 0x8f, 0x17, 0x12, 0x87, 0x78, 0x08, 0x93, 0x04, 0x03, 0xc5, 0x3d, 0x5a, 0x7d, 0x66},
	},
	{
		h:       sha512.New384,
		keyLen:  23,
		secret:  []byte("Calandrinia"),
		label:   []byte("takable"),
		context: []byte("donjon"),
		out:     []byte{0x9c, 0xf2, 0x95, 0xff, 0x2a, 0x55, 0x0f, 0xa4, 0x90, 0x53, 0xfe, 0x84, 0x13, 0x6d, 0x34, 0xa3, 0x34, 0x71, 0x3a, 0x2a, 0x04, 0x99, 0xb4},
	},
	{
		h:       sha512.New384,
		keyLen:  24,
		secret:  []byte("erythematous"),
		label:   []byte("intenancy"),
		context: []byte("outdoer"),
		out:     []byte{0x73, 0x33, 0x02, 0x06, 0x39, 0x9b, 0xe6, 0xe0, 0x68, 0xf0, 0x78, 0xe1, 0xba, 0xda, 0x33, 0x8e, 0x35, 0xfa, 0xe7, 0x5d, 0x84, 0x5e, 0x8e, 0xc1},
	},
	{
		h:       sha512.New384,
		keyLen:  25,
		secret:  []byte("deuteroscopy"),
		label:   []byte("nonphosphorized"),
		context: []byte("urled"),
		out:     []byte{0x47, 0x2f, 0x63, 0x05, 0xf5, 0x97, 0xd3, 0xbe, 0xb9, 0x6c, 0x5a, 0x39, 0xde, 0x82, 0x40, 0x0c, 0xec, 0x2c, 0x06, 0x38, 0x79, 0xdf, 0x73, 0x54, 0xe0},
	},
	{
		h:       sha512.New384,
		keyLen:  31,
		secret:  []byte("studbook"),
		label:   []byte("soullessness"),
		context: []byte("milsie"),
		out:     []byte{0xa3, 0xe9, 0x8f, 0x0f, 0xf9, 0x0f, 0xd8, 0x66, 0xc2, 0x98, 0x4b, 0xc4, 0x39, 0x38, 0x6f, 0x20, 0xfe, 0xe5, 0x70, 0x07, 0x23, 0x10, 0xb4, 0xc6, 0x0b, 0x76, 0x75, 0xa9, 0xf2, 0xc3, 0xa0},
	},
	{
		h:       sha512.New384,
		keyLen:  32,
		secret:  []byte("lherzolite"),
		label:   []byte("moosebush"),
		context: []byte("friandise"),
		out:     []byte{0x9f, 0x5c, 0xb1, 0x96, 0xf7, 0xba, 0x73, 0xc4, 0xdb, 0xf8, 0xb1, 0xa9, 0x76, 0x4e, 0x9b, 0xd8, 0x91, 0xd0, 0x19, 0x9e, 0x54, 0xc3, 0xdc, 0xec, 0xae, 0xc8, 0xcd, 0x60, 0x40, 0xe5, 0xcc, 0xb3},
	},
	{
		h:       sha512.New384,
		keyLen:  33,
		secret:  []byte("apparence"),
		label:   []byte("facially"),
		context: []byte("irrigatory"),
		out:     []byte{0xc2, 0x03, 0x3b, 0x2b, 0x10, 0xd9, 0xbb, 0x48, 0x89, 0x80, 0xfb, 0xe7, 0x0a, 0x0c, 0x0a, 0xa1, 0x72, 0xb9, 0xf9, 0xa7, 0xee, 0x35, 0x23, 0x56, 0x65, 0x46, 0xa4, 0x8f, 0x7c, 0xe9, 0xa5, 0x75, 0x2e},
	},
	{
		h:       sha512.New384,
		keyLen:  47,
		secret:  []byte("ogam"),
		label:   []byte("radiosonde"),
		context: []byte("vindicably"),
		out:     []byte{0x5f, 0xa9, 0xca, 0x4c, 0x0b, 0xf2, 0x4f, 0x66, 0xc2, 0x85, 0x3c, 0x50, 0xfe, 0x49, 0x16, 0xef, 0x5c, 0x71, 0x36, 0x93, 0xf3, 0x58, 0xcb, 0x38, 0xc0, 0x7a, 0xfc, 0xc3, 0x31, 0x51, 0x9e, 0xcd, 0x9b, 0x4a, 0x4d, 0xba, 0x86, 0xd9, 0x53, 0x66, 0x6b, 0x2c, 0x8a, 0xb9, 0x02, 0xff, 0x2a},
	},
	{
		h:       sha512.New384,
		keyLen:  48,
		secret:  []byte("achlorophyllous"),
		label:   []byte("calamitean"),
		context: []byte("Aloysia"),
		out:     []byte{0xf8, 0x00, 0x89, 0xe1, 0x70, 0x19, 0xb4, 0x21, 0x33, 0xb2, 0xcd, 0x05, 0x74, 0xa4, 0x28, 0x8a, 0x14, 0x33, 0xd5, 0x08, 0x4b, 0x77, 0xee, 0x19, 0x27, 0xbf, 0x9e, 0x7e, 0xf2, 0x55, 0xd2, 0xe5, 0x01, 0xbf, 0x7c, 0x0f, 0x5b, 0x01, 0xee, 0xf8, 0x4e, 0x89, 0x27, 0x4c, 0x34, 0xb9, 0x91, 0x64},
	},
	{
		h:       sha512.New384,
		keyLen:  49,
		secret:  []byte("salvagee"),
		label:   []byte("biotite"),
		context: []byte("underbarber"),
		out:     []byte{0x04, 0xb7, 0xae, 0x9a, 0x5a, 0x13, 0xc3, 0x03, 0xa3, 0x23, 0x4a, 0xf8, 0x6d, 0x32, 0x26, 0xcd, 0x73, 0xc9, 0xd4, 0xed, 0x90, 0xb7, 0x79, 0xf1, 0xa4, 0x45, 0x8a, 0x5a, 0x7b, 0x72, 0x86, 0x98, 0xb3, 0xe7, 0xb2, 0x74, 0x15, 0xe0, 0x4a, 0xec, 0x44, 0x6c, 0xb4, 0x7f, 0x21, 0x82, 0x62, 0x79, 0xad},
	},
	{
		h:       sha512.New384,
		keyLen:  63,
		secret:  []byte("showerful"),
		label:   []byte("bulling"),
		context: []byte("fibropsammoma"),
		out:     []byte{0xa4, 0x67, 0x96, 0x30, 0xf0, 0x52, 0xa5, 0x81, 0x47, 0xa2, 0x1d, 0xb8, 0xec, 0x89, 0x44, 0x20, 0xcd, 0xe0, 0x52, 0xea, 0x10, 0x35, 0x31, 0xcd, 0x46, 0x1f, 0xc7, 0x86, 0x95, 0x3f, 0x09, 0x3d, 0xb4, 0xac, 0xa2, 0xa2, 0x21, 0xd7, 0xa8, 0x91, 0x65, 0xda, 0xf7, 0xf1, 0x09, 0x8d, 0x72, 0x2f, 0x02, 0x80, 0xe3, 0x78, 0x5b, 0x8a, 0x7a, 0xaa, 0x55, 0xf7, 0xee, 0x13, 0x2f, 0xe9, 0x00},
	},
	{
		h:       sha512.New384,
		keyLen:  64,
		secret:  []byte("supervisual"),
		label:   []byte("pouch"),
		context: []byte("ferroprussiate"),
		out:     []byte{0x4f, 0x0e, 0xc7, 0x0c, 0x82, 0xd6, 0x07, 0xae, 0xe3, 0xeb, 0x42, 0x82, 0x9a, 0xe7, 0xe1, 0xd1, 0xef, 0x50, 0x09, 0xae, 0x35, 0xee, 0x7b, 0x9a, 0xad, 0xce, 0xa7, 0xae, 0x79, 0x69, 0x7d, 0xed, 0x10, 0xe1, 0x64, 0x6f, 0x86, 0x3f, 0x7f, 0x91, 0x1a, 0x44, 0xa1, 0xf5, 0x4b, 0x4b, 0x5e, 0xc5, 0x6e, 0xae, 0x0c, 0x7b, 0x3a, 0x78, 0x18, 0x89, 0xb8, 0xc0, 0xbf, 0x54, 0x6f, 0x5e, 0x0f, 0x63},
	},
	{
		h:       sha512.New384,
		keyLen:  65,
		secret:  []byte("uncalculatingly"),
		label:   []byte("Tachardiinae"),
		context: []byte("calcareousness"),
		out:     []byte{0xcd, 0x04, 0x86, 0x8f, 0x4a, 0x8b, 0x36, 0xa9, 0x99, 0x38, 0x30, 0x1a, 0x24, 0x5c, 0xb8, 0x5a, 0xa5, 0xc4, 0x25, 0x78, 0xaf, 0xfc, 0x2c, 0xaf, 0xb4, 0xd1, 0xcb, 0x41, 0xeb, 0xcc, 0x56, 0xf2, 0xe4, 0x01, 0xfa, 0x73, 0xa8, 0x26, 0x41, 0x75, 0x47, 0xc8, 0x42, 0xb8, 0x67, 0x72, 0xea, 0x58, 0xe3, 0x78, 0x2c, 0x54, 0x5a, 0xdb, 0xbd, 0xaa, 0xe9, 0x32, 0xf7, 0xa2, 0x8a, 0x07, 0x60, 0xc4, 0x79},
	},
	{
		h:       sha512.New,
		keyLen:  1,
		secret:  []byte("proudness"),
		label:   []byte("dawsoniaceous"),
		context: []byte("Clathrina"),
		out:     []byte{0x7d},
	},
	{
		h:       sha512.New,
		keyLen:  15,
		secret:  []byte("neoteric"),
		label:   []byte("anthracitiferous"),
		context: []byte("Niasese"),
		out:     []byte{0x7b, 0x74, 0xa2, 0x4e, 0x62, 0xd5, 0x93, 0xc3, 0xb0, 0x11, 0x93, 0x99, 0xd5, 0x47, 0xca},
	},
	{
		h:       sha512.New,
		keyLen:  16,
		secret:  []byte("coprose"),
		label:   []byte("prosiphonate"),
		context: []byte("amassable"),
		out:     []byte{0x3d, 0xdf, 0x4e, 0x4b, 0x54, 0xeb, 0x56, 0x14, 0x2d, 0xe6, 0x84, 0x8f, 0xc7, 0xaf, 0x0c, 0x11},
	},
	{
		h:       sha512.New,
		keyLen:  17,
		secret:  []byte("paratorium"),
		label:   []byte("recompliance"),
		context: []byte("dragsawing"),
		out:     []byte{0x5e, 0xe1, 0xfa, 0xc3, 0x9a, 0x25, 0xfe, 0x65, 0xc1, 0x35, 0x0b, 0xfd, 0x2b, 0x01, 0x8e, 0xf0, 0x7a},
	},
	{
		h:       sha512.New,
		keyLen:  23,
		secret:  []byte("cithara"),
		label:   []byte("fiercehearted"),
		context: []byte("Palamedea"),
		out:     []byte{0xd5, 0xb2, 0x4f, 0xab, 0x0d, 0x5b, 0x2e, 0x49, 0x30, 0xcd, 0x01, 0x13, 0x6c, 0xf5, 0xa9, 0x3b, 0x19, 0x35, 0x8e, 0x32, 0xd7, 0x33, 0x9b},
	},
	{
		h:       sha512.New,
		keyLen:  24,
		secret:  []byte("sombre"),
		label:   []byte("palmiped"),
		context: []byte("thankee"),
		out:     []byte{0x98, 0x20, 0x4e, 0x8e, 0x75, 0x6e, 0x67, 0x2e, 0xad, 0x50, 0x36, 0xa8, 0xda, 0x34, 0xbf, 0x13, 0x33, 0x89, 0x5a, 0x32, 0x80, 0x31, 0x6f, 0xa7},
	},
	{
		h:       sha512.New,
		keyLen:  25,
		secret:  []byte("amniotitis"),
		label:   []byte("fathearted"),
		context: []byte("tappa"),
		out:     []byte{0xed, 0xe9, 0xd3, 0xb8, 0x8f, 0xa2, 0x38, 0x53, 0x3e, 0xf9, 0x8e, 0xac, 0x4c, 0xe3, 0xf2, 0x0a, 0x6d, 0x16, 0x67, 0x5c, 0x13, 0x26, 0x58, 0x0f, 0xd0},
	},
	{
		h:       sha512.New,
		keyLen:  31,
		secret:  []byte("theogonic"),
		label:   []byte("Terebinthaceae"),
		context: []byte("Ido"),
		out:     []byte{0x67, 0x76, 0x30, 0x54, 0x8c, 0xd1, 0x7d, 0x24, 0xbf, 0xff, 0x04, 0x15, 0xcb, 0x4a, 0x7d, 0x75, 0x82, 0x28, 0xa7, 0x34, 0xb1, 0x81, 0x81, 0x73, 0x59, 0xa4, 0xeb, 0x7a, 0xd9, 0x52, 0x61},
	},
	{
		h:       sha512.New,
		keyLen:  32,
		secret:  []byte("hippiater"),
		label:   []byte("wairepo"),
		context: []byte("Floscularia"),
		out:     []byte{0x52, 0x21, 0x14, 0x54, 0x90, 0x87, 0x2e, 0xf6, 0x83, 0x8a, 0xe6, 0x62, 0x47, 0xb5, 0x76, 0x4f, 0xe2, 0xc2, 0xd0, 0x4b, 0x0c, 0x7b, 0x62, 0xb3, 0x0c, 0x78, 0x8a, 0x41, 0x81, 0x59, 0x99, 0x99},
	},
	{
		h:       sha512.New,
		keyLen:  33,
		secret:  []byte("overwide"),
		label:   []byte("precludable"),
		context: []byte("Wernerian"),
		out:     []byte{0x88, 0xf0, 0x7c, 0x38, 0x3d, 0x4a, 0x6d, 0xf6, 0x54, 0x26, 0x9c, 0x38, 0xda, 0xb3, 0xfa, 0x8b, 0x9f, 0xa4, 0xfd, 0x1f, 0xff, 0x34, 0xdf, 0x21, 0xaa, 0xd2, 0xa7, 0x6c, 0x9c, 0xdd, 0xeb, 0x63, 0x12},
	},
	{
		h:       sha512.New,
		keyLen:  47,
		secret:  []byte("creditability"),
		label:   []byte("pigeonwood"),
		context: []byte("praiseful"),
		out:     []byte{0x5e, 0x78, 0x1f, 0x02, 0x61, 0x20, 0xad, 0x2b, 0x26, 0x95, 0xbe, 0xa0, 0x1e, 0x84, 0x3b, 0x10, 0xe7, 0x06, 0x14, 0x54, 0x6d, 0xed, 0xc2, 0x78, 0x0d, 0x05, 0x60, 0x09, 0x4f, 0x44, 0x50, 0x26, 0xee, 0xe3, 0x0c, 0x86, 0xd3, 0x48, 0x52, 0x99, 0x64, 0xfb, 0x62, 0x31, 0xe4, 0xe6, 0x6c},
	},
	{
		h:       sha512.New,
		keyLen:  48,
		secret:  []byte("Mahi"),
		label:   []byte("abomine"),
		context: []byte("nosey"),
		out:     []byte{0xba, 0x1b, 0xb5, 0x61, 0x1c, 0x13, 0xf0, 0x47, 0xae, 0x50, 0x9f, 0x2a, 0x5b, 0x99, 0x23, 0x3b, 0x72, 0x6c, 0x1b, 0x66, 0x9a, 0xff, 0xd0, 0x2f, 0x14, 0xea, 0xa3, 0x4e, 0xa0, 0x87, 0x7a, 0x3f, 0x32, 0x16, 0xc9, 0x9f, 0x72, 0x7f, 0x21, 0xcd, 0x39, 0xf8, 0x56, 0x07, 0x1f, 0x37, 0xd8, 0xb4},
	},
	{
		h:       sha512.New,
		keyLen:  49,
		secret:  []byte("a"),
		label:   []byte("stagnize"),
		context: []byte("archil"),
		out:     []byte{0x2d, 0x63, 0xc9, 0x79, 0xb0, 0xfb, 0xb4, 0x93, 0x38, 0x67, 0x38, 0xf9, 0x38, 0xe7, 0x4c, 0xed, 0xf7, 0x43, 0xdd, 0x11, 0x1a, 0x0d, 0xd1, 0x98, 0x59, 0xa7, 0x7d, 0x4b, 0x50, 0x79, 0x03, 0x7c, 0xa7, 0x4d, 0x3d, 0xac, 0xc6, 0x2d, 0x0d, 0x34, 0x6c, 0x5d, 0xf3, 0xfd, 0xc4, 0x76, 0xe7, 0x66, 0xa5},
	},
	{
		h:       sha512.New,
		keyLen:  63,
		secret:  []byte("violational"),
		label:   []byte("limnanthaceous"),
		context: []byte("ripa"),
		out:     []byte{0xbd, 0x51, 0x7e, 0x02, 0xe1, 0xa6, 0xc0, 0x04, 0x4b, 0xab, 0xae, 0xe1, 0x9d, 0x24, 0xbf, 0x92, 0x11, 0x2a, 0xd7, 0xac, 0x4e, 0x6f, 0x99, 0xd2, 0xa0, 0xf5, 0xb4, 0xc8, 0x12, 0x45, 0x9b, 0x7a, 0xc8, 0xdc, 0xb5, 0xb0, 0x9f, 0xa0, 0xe5, 0x28, 0x58, 0x30, 0xb2, 0x71, 0x38, 0x41, 0xda, 0x32, 0xec, 0xa2, 0x54, 0xfe, 0x5a, 0xf7, 0xe9, 0x8a, 0x83, 0x6a, 0x86, 0xe3, 0xbf, 0xff, 0xd4},
	},
	{
		h:       sha512.New,
		keyLen:  64,
		secret:  []byte("into"),
		label:   []byte("kaiser"),
		context: []byte("zoolatrous"),
		out:     []byte{0x58, 0x32, 0xcd, 0xfc, 0x9b, 0x33, 0xf3, 0x29, 0x0d, 0x20, 0x86, 0xa3, 0x54, 0xbc, 0xc6, 0x02, 0xea, 0xb5, 0x15, 0x44, 0xec, 0x5f, 0x64, 0x03, 0x2c, 0x3b, 0x2a, 0x1a, 0x08, 0x7d, 0xe2, 0x38, 0x97, 0x4e, 0xf4, 0x32, 0xb5, 0x7c, 0x21, 0x23, 0x23, 0x1a, 0xca, 0xa7, 0xf7, 0xbd, 0xa6, 0xe1, 0x48, 0xe7, 0xe9, 0x17, 0x40, 0x5d, 0xd5, 0x4f, 0x1e, 0x92, 0x87, 0x08, 0xa8, 0xfb, 0x2e, 0x4e},
	},
	{
		h:       sha512.New,
		keyLen:  65,
		secret:  []byte("nonadjournment"),
		label:   []byte("novicehood"),
		context: []byte("deglutitious"),
		out:     []byte{0x80, 0x61, 0x53, 0x36, 0xfb, 0xea, 0x23, 0xbe, 0xd5, 0x0a, 0xd2, 0xac, 0xa4, 0xc0, 0x0c, 0x8e, 0x4e, 0xe3, 0x15, 0x6a, 0xa0, 0x98, 0x73, 0x2a, 0x92, 0xad, 0x20, 0xc7, 0xda, 0xae, 0x78, 0x88, 0x93, 0xcb, 0x90, 0xd6, 0xf1, 0x75, 0x0c, 0x13, 0xac, 0x41, 0xef, 0xe6, 0x16, 0x5a, 0x3e, 0x73, 0xaa, 0x01, 0xcd, 0x95, 0x61, 0xae, 0xe2, 0x25, 0x92, 0xd1, 0xe7, 0xca, 0x4f, 0x77, 0x3d, 0x27, 0x7d},
	},
}

func TestCounterMode(t *testing.T) {
	for i, tt := range hmacCounterTests {
		out := HMACCounter(tt.h, tt.keyLen, tt.secret, tt.label, tt.context)
		if !bytes.Equal(out, tt.out) {
			t.Errorf("test %d: Key() = %x, want %x", i, out, tt.out)
		}
	}
}

func TestCounterModePanics(t *testing.T) {
	secret := []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07}
	label := []byte{0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17}
	context := []byte{0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27}

	panics := func(fn func()) (p bool) {
		defer func() { p = recover() != nil }()
		fn()
		return
	}
	for _, keyLen := range []int{-2147483648, -1, 536870912, 2147483647} {
		if !panics(func() { HMACCounter(sha256.New, keyLen, secret, label, context) }) {
			t.Errorf("requesting negative or large key length should trigger panic")
		}
	}
}

func benchmarkKBKDFSingle(h func() hash.Hash, keyLen int, b *testing.B) {
	secret := []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07}
	label := []byte{0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17}
	context := []byte{0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27}

	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		HMACCounter(h, keyLen, secret, label, context)
	}
}

func BenchmarkCounterMode960BytesSHA1(b *testing.B) {
	benchmarkKBKDFSingle(sha1.New, 960, b)
}

func BenchmarkCounterMode960BytesSHA256(b *testing.B) {
	benchmarkKBKDFSingle(sha256.New, 960, b)
}

func BenchmarkCounterMode960BytesSHA384(b *testing.B) {
	benchmarkKBKDFSingle(sha512.New384, 960, b)
}

func BenchmarkCounterMode960BytesSHA512(b *testing.B) {
	benchmarkKBKDFSingle(sha512.New, 960, b)
}
